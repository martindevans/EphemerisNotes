"use strict";(self.webpackChunkephemeris_notes=self.webpackChunkephemeris_notes||[]).push([[9625],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>c});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),u=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(a),c=i,h=m["".concat(o,".").concat(c)]||m[c]||d[c]||l;return a?n.createElement(h,r(r({ref:t},p),{},{components:a})):n.createElement(h,r({ref:t},p))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var u=2;u<l;u++)r[u]=a[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8539:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var n=a(7462),i=(a(7294),a(3905));const l={tags:["devlog","OrbitalMechanics","Multiplayer"],sidebar_position:12},r=void 0,s={unversionedId:"ImplementationDetails/devlog/2024/December",id:"ImplementationDetails/devlog/2024/December",title:"December",description:"Sunday 1st",source:"@site/docs/ImplementationDetails/devlog/2024/December.md",sourceDirName:"ImplementationDetails/devlog/2024",slug:"/ImplementationDetails/devlog/2024/December",permalink:"/EphemerisNotes/ImplementationDetails/devlog/2024/December",draft:!1,editUrl:"https://github.com/martindevans/EphemerisNotes/tree/master/docs/ImplementationDetails/devlog/2024/December.md",tags:[{label:"devlog",permalink:"/EphemerisNotes/tags/devlog"},{label:"OrbitalMechanics",permalink:"/EphemerisNotes/tags/orbital-mechanics"},{label:"Multiplayer",permalink:"/EphemerisNotes/tags/multiplayer"}],version:"current",sidebarPosition:12,frontMatter:{tags:["devlog","OrbitalMechanics","Multiplayer"],sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"November",permalink:"/EphemerisNotes/ImplementationDetails/devlog/2024/November"},next:{title:"Media",permalink:"/EphemerisNotes/category/media"}},o={},u=[{value:"Sunday 1st",id:"sunday-1st",level:2},{value:"Monday 2nd",id:"monday-2nd",level:2},{value:"Tuesday 3rd",id:"tuesday-3rd",level:2},{value:"Wednesday 4th",id:"wednesday-4th",level:2},{value:"Thursday 5th",id:"thursday-5th",level:2},{value:"Friday 6th",id:"friday-6th",level:2},{value:"Monday 9th",id:"monday-9th",level:2},{value:"Tuesday 10th",id:"tuesday-10th",level:2},{value:"Wednesday 11th",id:"wednesday-11th",level:2},{value:"Thursday 12th",id:"thursday-12th",level:2},{value:"Friday 13th",id:"friday-13th",level:2},{value:"Monday 16th",id:"monday-16th",level:2},{value:"Tuesday 17th",id:"tuesday-17th",level:2},{value:"Wednesday 18th",id:"wednesday-18th",level:2}],p={toc:u};function d(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"sunday-1st"},"Sunday 1st"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Cleaned up ",(0,i.kt)("inlineCode",{parentName:"li"},"MyriadDynamics")," and moved to a more permanent location"),(0,i.kt)("li",{parentName:"ul"},"Installed ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/starikcetin/Eflatun.SceneReference"},"https://github.com/starikcetin/Eflatun.SceneReference")),(0,i.kt)("li",{parentName:"ul"},"Added AssemblyDefinitions to project")),(0,i.kt)("h2",{id:"monday-2nd"},"Monday 2nd"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Cysharp/UniTask"},"UniTask")," to project"),(0,i.kt)("li",{parentName:"ul"},"Using UniTask in solar system loader"),(0,i.kt)("li",{parentName:"ul"},"Rewritten loader to use scenes to load planets",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Reference the scene, instead of the prefab"),(0,i.kt)("li",{parentName:"ul"},"Async loading"),(0,i.kt)("li",{parentName:"ul"},"Doesn't load all of the planet content ahead of time (which it would with prefabs)"),(0,i.kt)("li",{parentName:"ul"},"It's like addressables, but less buggy"))),(0,i.kt)("li",{parentName:"ul"},"Updated scenes to use new loading system"),(0,i.kt)("li",{parentName:"ul"},"Messing with realtime super-resolution ideas (to make enormous planetary textures usable)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Idea:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Train a (very) small neural network to upscale one specific image, overfit as much as possible. Train it on the high res textures."),(0,i.kt)("li",{parentName:"ul"},"Use that NN in the shaders, sampling the texture and upscaling it on the fly."))))),(0,i.kt)("li",{parentName:"ul"},"Started setting up new NFGO menu/lobby/game scene, using Myriad this time")),(0,i.kt)("h2",{id:"tuesday-3rd"},"Tuesday 3rd"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"NFGO lobby connection approval"),(0,i.kt)("li",{parentName:"ul"},"Lobby sync (names, ready state, starting game etc)")),(0,i.kt)("h2",{id:"wednesday-4th"},"Wednesday 4th"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Started on game systems for networked pong (in Myriad)"),(0,i.kt)("li",{parentName:"ul"},"Improving method docs for Myriad queries"),(0,i.kt)("li",{parentName:"ul"},"Exposed ",(0,i.kt)("inlineCode",{parentName:"li"},"GetCachedQuery")," in public Myriad API"),(0,i.kt)("li",{parentName:"ul"},"Experimenting with message/event processing for network spawning of entities")),(0,i.kt)("h2",{id:"thursday-5th"},"Thursday 5th"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Spawning objects (the ball) with a "GameObject lead" system:',(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Spawn a GameObject"),(0,i.kt)("li",{parentName:"ul"},"GO creates the relevant ",(0,i.kt)("inlineCode",{parentName:"li"},"Entity")," locally"),(0,i.kt)("li",{parentName:"ul"},"RPCs for this specific Entity can be sent through that GameObject"))),(0,i.kt)("li",{parentName:"ul"},"Wrestling with sync issues (servers spawns ball in game scene, but client hasn't loaded that scene yet)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Can't find a good way around this that isn't messy"),(0,i.kt)("li",{parentName:"ul"},"Consider a totally different approach (custom messaging)")))),(0,i.kt)("h2",{id:"friday-6th"},"Friday 6th"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Setting up Mirror test project"),(0,i.kt)("li",{parentName:"ul"},"Setup very basic Mirror lobby")),(0,i.kt)("h2",{id:"monday-9th"},"Monday 9th"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Updating Myriad integration packages to handle some breaking changes made over the weekend (removing ",(0,i.kt)("inlineCode",{parentName:"li"},"BaseSystem"),")"),(0,i.kt)("li",{parentName:"ul"},"Updated Ephemeris for the same breaking changes"),(0,i.kt)("li",{parentName:"ul"},"Mirror lobby using code from ECOM"),(0,i.kt)("li",{parentName:"ul"},"Setting up lobby with a Myriad world, to hold per-player data (e.g. ready state, name)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This can be synced just like normal game data")))),(0,i.kt)("h2",{id:"tuesday-10th"},"Tuesday 10th"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Spawning player objects, putting them into ECS"),(0,i.kt)("li",{parentName:"ul"},"Setup local only paddle movement")),(0,i.kt)("h2",{id:"wednesday-11th"},"Wednesday 11th"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Synchronising object spawning using Mirror",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Developed a pattern to spawn things with Myriad entities and GameObjects")))),(0,i.kt)("h2",{id:"thursday-12th"},"Thursday 12th"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Cleaning up sim setup across clients and server"),(0,i.kt)("li",{parentName:"ul"},"Setting up some pong gameplay systems")),(0,i.kt)("h2",{id:"friday-13th"},"Friday 13th"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixed SolarSystem test scene (some changes made in the docking sim development broke it)"),(0,i.kt)("li",{parentName:"ul"},"Developing editor visualisers for some ECS components:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ScenePosition"),(0,i.kt)("li",{parentName:"ul"},"UnityTransform"),(0,i.kt)("li",{parentName:"ul"},"WorldVelocity"))),(0,i.kt)("li",{parentName:"ul"},"Reviewing existing code to see where ",(0,i.kt)("inlineCode",{parentName:"li"},"[BurstCompile]")," can be added")),(0,i.kt)("h2",{id:"monday-16th"},"Monday 16th"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Updating query caching system in ",(0,i.kt)("inlineCode",{parentName:"li"},"Myriad.ECS")),(0,i.kt)("li",{parentName:"ul"},"Designing debris clouds",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Modelling debris from an impact as a single entity, with a position and spread that expands over time. This way debris can be fully nbody simulated without simulating thousands of objects."),(0,i.kt)("li",{parentName:"ul"},"This has problems:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"What's it for? only for spherical expanding clouds of debris. That doesn't actually fit very much. e.g. an impact on a ship creates a ",(0,i.kt)("em",{parentName:"li"},"cone")," of debris not a sphere!"))))),(0,i.kt)("li",{parentName:"ul"},"Designing bullet chains",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'Modelling a lot of bullets as a "chain" of entities with full nbody simulation and bullets evenly distributed along the links in the chain. At the cost of just 2 entities in the integrator this can simulate lots of bullets.'),(0,i.kt)("li",{parentName:"ul"},"Store a bitfield of which bullets are missing, to account for bullets hitting things and being removed."),(0,i.kt)("li",{parentName:"ul"},'Calculate a random "divergence" for each bullet, away from the perfect centre line to account for spread when firing.')))),(0,i.kt)("h2",{id:"tuesday-17th"},"Tuesday 17th"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tweaking bullet chain visualisation"),(0,i.kt)("li",{parentName:"ul"},"Added in velocity of chain links to individual bullets"),(0,i.kt)("li",{parentName:"ul"},"Investigating Unity gizmos for ",(0,i.kt)("inlineCode",{parentName:"li"},"Myriad.ECS")," entities"),(0,i.kt)("li",{parentName:"ul"},"Messing with VFX graph to display bullets",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Probably not going to use this - too hard to make the bullets in the VFX line up with the actual sim bullets"))),(0,i.kt)("li",{parentName:"ul"},"Investigating randomness generation in shaders",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Began developing a simple RNG that can be implemented on CPU and GPU, this can be used to generate shot positions in a shader using the seed"),(0,i.kt)("li",{parentName:"ul"},"Is this actually necessary? Can probably compute it once on CPU and write the necessary data to a ",(0,i.kt)("inlineCode",{parentName:"li"},"ComputeBuffer")))),(0,i.kt)("li",{parentName:"ul"},"Learning more about compute shaders in combination with VFX graph",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/Packages/com.unity.visualeffectgraph@17.0/manual/Operator-SampleBuffer.html"},"https://docs.unity3d.com/Packages/com.unity.visualeffectgraph@17.0/manual/Operator-SampleBuffer.html")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/keijiro/VfxGraphGraphicsBufferTest"},"https://github.com/keijiro/VfxGraphGraphicsBufferTest")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/ScriptReference/ComputeShader.html"},"https://docs.unity3d.com/ScriptReference/ComputeShader.html")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://catlikecoding.com/unity/tutorials/basics/compute-shaders/"},"https://catlikecoding.com/unity/tutorials/basics/compute-shaders/")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/36260528/unity-detect-compute-shader-completion"},"https://stackoverflow.com/questions/36260528/unity-detect-compute-shader-completion")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/"},"https://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/"))))),(0,i.kt)("h2",{id:"wednesday-18th"},"Wednesday 18th"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Considering curves for bullet chains",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Experimented with cubic bezier, this is easy to implement but not particularly accurate"))),(0,i.kt)("li",{parentName:"ul"},"Setup a test scene to test bullets at true orbital scale"),(0,i.kt)("li",{parentName:"ul"},"Cleaning up some spawning code used in previous test scenes")))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkephemeris_notes=self.webpackChunkephemeris_notes||[]).push([[7859],{597:e=>{e.exports=JSON.parse('{"label":"TechnicalDetails","permalink":"/EphemerisNotes/tags/technical-details","allTagsPath":"/EphemerisNotes/tags","count":10,"items":[{"id":"ImplementationDetails/Rendering/CarmackStarRendering","title":"CarmackStarRendering","description":"https://news.ycombinator.com/item?id=33837401","permalink":"/EphemerisNotes/ImplementationDetails/Rendering/CarmackStarRendering"},{"id":"ImplementationDetails/Rendering/CPULines","title":"CPU Line Rendering","description":"In part 1 we looked at how to take a buffer of positions and the render them on the GPU with all kinds of helpful features such as constant screen size, double precision and stencil support. But where do we get the positions to go in that buffer?","permalink":"/EphemerisNotes/ImplementationDetails/Rendering/CPULines"},{"id":"ImplementationDetails/ProceduralGeneration/EditorProceduralGeneration","title":"Editor Procedural Generation","description":"To procedurally generate content in the editor a Scripted Importer is useful.","permalink":"/EphemerisNotes/ImplementationDetails/ProceduralGeneration/EditorProceduralGeneration"},{"id":"ImplementationDetails/ProceduralGeneration/GeneratingMeshes","title":"Generating Meshes","description":"Unity has the MeshDataArray system for procedurally generating an array of meshes in a job compatible way.","permalink":"/EphemerisNotes/ImplementationDetails/ProceduralGeneration/GeneratingMeshes"},{"id":"ImplementationDetails/Rendering/GPULines","title":"GPU Line Rendering","description":"Ephemeris needs to draw a lot of lines to show orbital paths. In fact most of the important information in the game is communicated entirely with lines and UI elements!","permalink":"/EphemerisNotes/ImplementationDetails/Rendering/GPULines"},{"id":"ImplementationDetails/Physics/Integration","title":"Integration","description":"---","permalink":"/EphemerisNotes/ImplementationDetails/Physics/Integration"},{"id":"ImplementationDetails/Physics/Kepler","title":"Kepler","description":"In orbital mechanics, Kepler\'s equation relates various geometric properties of the orbit of a body subject to a central force. This can be used to calculate the position of a body (relative to the central body) at any time, without having to iteratively integrate acceleration and velocity over time.","permalink":"/EphemerisNotes/ImplementationDetails/Physics/Kepler"},{"id":"ImplementationDetails/Rendering/LineGridRendering","title":"Line Grid Rendering","description":"Ephemeris has an \\"infinite\\" grid which acts as a reference to help understand the position of things within 3D space. This reference plane should have lines as thin as possible (1 pixel) without suffering from aliasing at any angle or distance.","permalink":"/EphemerisNotes/ImplementationDetails/Rendering/LineGridRendering"},{"id":"ImplementationDetails/PrecisionScale/PrecisionScale","title":"Precision & Scale","description":"---","permalink":"/EphemerisNotes/ImplementationDetails/PrecisionScale/"},{"id":"ImplementationDetails/Rendering/SceneScaleTricks","title":"Scene Scale Tricks","description":"The Ephemeris simulation is completely double precision and uses SI units, 1unit = 1meter. However, this simulation must be displayed in the Unity scene. This is a problem - the Unity scene uses single precision coordinates for position, there is a fundamental part of the engine and there is no way to change this. As mentioned in Precision & Scale Unity recommends a maximum scene size of 50km (i.e. 50,000 units) at most. To fix this Ephemeris uses three tricks: scale, floating origin and offsetting.","permalink":"/EphemerisNotes/ImplementationDetails/Rendering/SceneScaleTricks"}]}')}}]);
"use strict";(self.webpackChunkephemeris_notes=self.webpackChunkephemeris_notes||[]).push([[1916],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var i=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,i,l=function(e,t){if(null==e)return{};var a,i,l={},n=Object.keys(e);for(i=0;i<n.length;i++)a=n[i],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)a=n[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=i.createContext({}),u=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},m=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var a=e.components,l=e.mdxType,n=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=u(a),h=l,c=d["".concat(s,".").concat(h)]||d[h]||p[h]||n;return a?i.createElement(c,r(r({ref:t},m),{},{components:a})):i.createElement(c,r({ref:t},m))}));function h(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var n=a.length,r=new Array(n);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var u=2;u<n;u++)r[u]=a[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7246:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>n,metadata:()=>o,toc:()=>u});var i=a(7462),l=(a(7294),a(3905));const n={tags:["devlog","multiplayer","Collisions","DamageModel"],sidebar_position:8},r=void 0,o={unversionedId:"ImplementationDetails/devlog/2025/August",id:"ImplementationDetails/devlog/2025/August",title:"August",description:"Monday 4th",source:"@site/docs/ImplementationDetails/devlog/2025/August.md",sourceDirName:"ImplementationDetails/devlog/2025",slug:"/ImplementationDetails/devlog/2025/August",permalink:"/EphemerisNotes/ImplementationDetails/devlog/2025/August",draft:!1,editUrl:"https://github.com/martindevans/EphemerisNotes/tree/master/docs/ImplementationDetails/devlog/2025/August.md",tags:[{label:"devlog",permalink:"/EphemerisNotes/tags/devlog"},{label:"multiplayer",permalink:"/EphemerisNotes/tags/multiplayer"},{label:"Collisions",permalink:"/EphemerisNotes/tags/collisions"},{label:"DamageModel",permalink:"/EphemerisNotes/tags/damage-model"}],version:"current",sidebarPosition:8,frontMatter:{tags:["devlog","multiplayer","Collisions","DamageModel"],sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"July",permalink:"/EphemerisNotes/ImplementationDetails/devlog/2025/July"},next:{title:"September",permalink:"/EphemerisNotes/ImplementationDetails/devlog/2025/September"}},s={},u=[{value:"Monday 4th",id:"monday-4th",level:2},{value:"Tuesday 5th",id:"tuesday-5th",level:2},{value:"Wednesday 6th",id:"wednesday-6th",level:2},{value:"Thursday 7th",id:"thursday-7th",level:2},{value:"Friday 8th",id:"friday-8th",level:2},{value:"Monday 11th",id:"monday-11th",level:2},{value:"Tuesday 12th",id:"tuesday-12th",level:2},{value:"Wednesday 13th",id:"wednesday-13th",level:2},{value:"Thursday 14th",id:"thursday-14th",level:2},{value:"Friday 15th",id:"friday-15th",level:2},{value:"Monday 18th",id:"monday-18th",level:2},{value:"Tuesday 19th",id:"tuesday-19th",level:2},{value:"Wednesday 20th",id:"wednesday-20th",level:2},{value:"Thursday 21st",id:"thursday-21st",level:2},{value:"Friday 22nd",id:"friday-22nd",level:2},{value:"Monday 25th",id:"monday-25th",level:2},{value:"Tuesday 26th",id:"tuesday-26th",level:2},{value:"Wednesday 27th",id:"wednesday-27th",level:2},{value:"Thursday 28th",id:"thursday-28th",level:2},{value:"Friday 29th",id:"friday-29th",level:2}],m={toc:u};function p(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,i.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"monday-4th"},"Monday 4th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Reading over multiplayer related code, applying minor cleanup and comments"),(0,l.kt)("li",{parentName:"ul"},"Split up some bullet systems into more atomic systems, this will be easier to rearrange for multiplayer things later"),(0,l.kt)("li",{parentName:"ul"},"Setting seed once when bullet points are created and storing it instead of deterministically generating it every frame, this means it can be transmitted"),(0,l.kt)("li",{parentName:"ul"},"Experimenting with bullet impact VFX")),(0,l.kt)("h2",{id:"tuesday-5th"},"Tuesday 5th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Researching bullet damage/armouring models",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"WoWs armour penetration mechanics: ",(0,l.kt)("a",{parentName:"li",href:"https://wiki.wargaming.net/en/Ship:Armor_Penetration"},"https://wiki.wargaming.net/en/Ship:Armor_Penetration"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Damage saturation: lots of damage to one area reduces damage taken (no point shooting something that's already damaged/destroyed)"),(0,l.kt)("li",{parentName:"ul"},"HE shells hitting armour they can't penetrate shatter, no damage"),(0,l.kt)("li",{parentName:"ul"},"AP shells arm on impact and explode shortly after, doing internal damage. Failing to penetrate, or over penetrating massively reduces damage."),(0,l.kt)("li",{parentName:"ul"},"Ricochet chance based on armour angle",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Overmatch means that very large shells hitting very thin armour can't ricochet"))),(0,l.kt)("li",{parentName:"ul"},"Shell normalization: if there are multiple layers of armour the shell path gets bent slightly towards perpendicular every time it penetrates. This makes subsequent layers easier to penetrate."))),(0,l.kt)("li",{parentName:"ul"},"Atomic rockets, armour formulas: ",(0,l.kt)("a",{parentName:"li",href:"https://www.projectrho.com/public_html/rocket/spacewardefense.php#byronarmor"},"https://www.projectrho.com/public_html/rocket/spacewardefense.php#byronarmor")))),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},"BulletDamage")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"BulletDamageContainer"),", passing these through from gun entity to bullet entities. Collision system can use these for applying damage."),(0,l.kt)("li",{parentName:"ul"},"Sketching out gun sync script"),(0,l.kt)("li",{parentName:"ul"},"Improved rotational transform sync script (mostly just as a reminder how this stuff works!)")),(0,l.kt)("h2",{id:"wednesday-6th"},"Wednesday 6th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"More experiments with bullet VFX"),(0,l.kt)("li",{parentName:"ul"},"Developing generic system for per-ship network comms",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"A ship is a collection of entities",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},'One root "ship" entity has the comms objects attached'),(0,l.kt)("li",{parentName:"ul"},"Child entities use those comms objects to send a receive ship specific messages"))))),(0,l.kt)("li",{parentName:"ul"},"Attached gun to network spaceship entity",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Debugging issue with transform hierarchy for network components (bullets were spawning at the origin)"))),(0,l.kt)("li",{parentName:"ul"},'Added "delayed resolve" to ',(0,l.kt)("inlineCode",{parentName:"li"},"Myriad.ECS"),", to help with building hierarchies of entities"),(0,l.kt)("li",{parentName:"ul"},"Using delayed resolve to assign ownership of guns hierarchy to the root ship entity")),(0,l.kt)("h2",{id:"thursday-7th"},"Thursday 7th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Multiplayer backpressure is triggering when bullets are spawned due to the very short rails, investigating.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Added extra check if sampler is trying to sample past the end of a rail. In this case immediately apply backpressure."),(0,l.kt)("li",{parentName:"ul"},"Added a grace period, short (but non-error) rails are acceptable so long as they were created within the last 2 seconds. This gives the integrator some time to generate data."),(0,l.kt)("li",{parentName:"ul"},"Prevented backpressure from sometimes ",(0,l.kt)("strong",{parentName:"li"},"speeding up")," time speed! Jumping from paused to 1x."))),(0,l.kt)("li",{parentName:"ul"},"Add a system for limiting the maximum time speed, can potentially use this to ban very high time speeds during active combat",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Disabling time request buttons which are over the max"),(0,l.kt)("li",{parentName:"ul"},"Checking and clamping to max allowed speed on server time sync system"),(0,l.kt)("li",{parentName:"ul"},"Replicating max speed from server to clients"))),(0,l.kt)("li",{parentName:"ul"},"Syncing gun trigger",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Components to mark entity for sending"),(0,l.kt)("li",{parentName:"ul"},"System to drive that"),(0,l.kt)("li",{parentName:"ul"},"System to toggle trigger on and off for testing"),(0,l.kt)("li",{parentName:"ul"},"It works!")))),(0,l.kt)("h2",{id:"friday-8th"},"Friday 8th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Redesigning bullet collision system, it's taking too much time at high time speeds",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Add colliders instead of bullets to octree?"),(0,l.kt)("li",{parentName:"ul"},"Use Sweep and Prune instead?"),(0,l.kt)("li",{parentName:"ul"},"Experimenting with a sweep and prune system"))),(0,l.kt)("li",{parentName:"ul"},"Creating primitive DI system for systems to share resources")),(0,l.kt)("h2",{id:"monday-11th"},"Monday 11th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Prototyping a new type of ",(0,l.kt)("inlineCode",{parentName:"li"},"Myriad.ECS")," query that bulk copies data into arrays. Ideally this would never be used, but it's going to be needed to copy data into a form that can be used in a Unity job."),(0,l.kt)("li",{parentName:"ul"},"Implementing jobbified Sweep & Prune",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Unit testing"),(0,l.kt)("li",{parentName:"ul"},"Fixing various bugs")))),(0,l.kt)("h2",{id:"tuesday-12th"},"Tuesday 12th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Sweep & Prune",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"More tests"),(0,l.kt)("li",{parentName:"ul"},"Improving how capacity grows (exponential when small, linear when large)"),(0,l.kt)("li",{parentName:"ul"},"Started on bipartite sweep - comparing one sorted list of bounds to another to find overlaps from one to the other",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Unit tests"),(0,l.kt)("li",{parentName:"ul"},"Fuzzing fails, need to add more specific tests to narrow it down")))))),(0,l.kt)("h2",{id:"wednesday-13th"},"Wednesday 13th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Refactoring bipartite sweep and prune to reduce complexity"),(0,l.kt)("li",{parentName:"ul"},"Begun setting up system to fill sweep & prune with bullet data",(0,l.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Caching velocity from next bullet point (improves cache locality)"),(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Add a system to calculate swept bounds and store them in a component",(0,l.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Create a component for that")))))),(0,l.kt)("h2",{id:"thursday-14th"},"Thursday 14th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Creating system to calculate bounds for bullets and store it in component"),(0,l.kt)("li",{parentName:"ul"},"Creating a new system group for general collision systems",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Added a system to index broadphase spheres"))),(0,l.kt)("li",{parentName:"ul"},"Tested bullets vs broadphase spheres with S&P, seems to work",(0,l.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Strip out of collisions and test more")))),(0,l.kt)("h2",{id:"friday-15th"},"Friday 15th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Removed octree based collisions, replaced with SAP",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"It works!")))),(0,l.kt)("h2",{id:"monday-18th"},"Monday 18th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Developing bullet impact VFX",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Sparks fly off in bullet direction reflected around surface normal",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},'Lifetime is random float, multiplied by random int. Splits particle lifetimes up into "bands" which looks better than all fading off together.'))),(0,l.kt)("li",{parentName:"ul"},"Sparks in hemisphere around surface normal",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Same trick with lifetime bands"),(0,l.kt)("li",{parentName:"ul"},"Multiply brightness by sine curve (random frequency per particle) to make them twinkle (as if spinning and catching the light)"))),(0,l.kt)("li",{parentName:"ul"},"Puff of smoke particles"),(0,l.kt)("li",{parentName:"ul"},'"Shatter" parameter switch number of ricochet particles (1 when not shattering, random N when shattering)'),(0,l.kt)("li",{parentName:"ul"},'"Ricochet" parameter disables ricochet particles entirely'))),(0,l.kt)("li",{parentName:"ul"},"Testing multiplayer bullets",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"When firing stops bullet chain jumps to the side"),(0,l.kt)("li",{parentName:"ul"},"Same happens in single player test scene, much easier to reproduce!",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Offsetting the final point an appropriate amount of time into the past and finding the correct position there"))))),(0,l.kt)("li",{parentName:"ul"},"Improving debugging tools for ECS",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Hiding empty archetypes"),(0,l.kt)("li",{parentName:"ul"},"Filtering archetypes by component type")))),(0,l.kt)("h2",{id:"tuesday-19th"},"Tuesday 19th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Cleanup on Sweep & Prune job management",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Forcing job scheduling to happen right away, we're going to wait on these jobs so we don't want any extra scheduling delay"))),(0,l.kt)("li",{parentName:"ul"},"Considered swapping octree for S&P in rendering",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Could be made to work, but the rendering query would have to be split out to give the job time to run. Could schedule in ",(0,l.kt)("inlineCode",{parentName:"li"},"Update")," and wait in ",(0,l.kt)("inlineCode",{parentName:"li"},"LateUpdate"),"?"))),(0,l.kt)("li",{parentName:"ul"},"Experimenting with attaching bullet impact VFX to ships",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"They can just be attached directly to the small body and simulated in world space"),(0,l.kt)("li",{parentName:"ul"},"VFX must be cleared when the floating origin changes!"))),(0,l.kt)("li",{parentName:"ul"},"Considering design for narrow phase collision system",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Unity colliders or custom colliders?",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Unity.Physics")," colliders look like they can be used standalone (i.e. without ",(0,l.kt)("inlineCode",{parentName:"li"},"Unity.ECS"),")"),(0,l.kt)("li",{parentName:"ul"},"Built a test scene for this, slightly awkward but they can be used standalone"))),(0,l.kt)("li",{parentName:"ul"},"Hierarchy in GameObjects or entities?",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Wherever it is built from ultimately we want to store a ",(0,l.kt)("inlineCode",{parentName:"li"},"List<(Entity, Collider)>")," in the root entity. That way Broadphase against root, then check all children."))))),(0,l.kt)("li",{parentName:"ul"},"Fixed a whole load of Burst compiler related warnings and errors that suddenly appeared, probably due to a change in the Burst version when installing ",(0,l.kt)("inlineCode",{parentName:"li"},"Unity.Physics"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Genuine problems that didn't have warnings before, so this is a good thing!")))),(0,l.kt)("h2",{id:"wednesday-20th"},"Wednesday 20th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Cleaning up some more Burst related warnings"),(0,l.kt)("li",{parentName:"ul"},"Experimenting with decals on objects (bullet damage)"),(0,l.kt)("li",{parentName:"ul"},"Investigating ",(0,l.kt)("inlineCode",{parentName:"li"},"Unity.Physics.CompoundCollider"),", this can be used as a wrapper around all other collider types (effectively dynamic dispatch)")),(0,l.kt)("h2",{id:"thursday-21st"},"Thursday 21st"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Testing a system scheduling jobs using ",(0,l.kt)("inlineCode",{parentName:"li"},"BlobAssetReference<Collider>")," in the job. This seems to be fine."),(0,l.kt)("li",{parentName:"ul"},"Simplifying Sweep & Prune return results to make it easier to schedule dependent jobs"),(0,l.kt)("li",{parentName:"ul"},"Storing more metadata in S&P results, copying out relevant data for scheduling chained jobs")),(0,l.kt)("h2",{id:"friday-22nd"},"Friday 22nd"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Refactored ray generator to a separate struct that copies all relevant data, this means it can be passed into a job"),(0,l.kt)("li",{parentName:"ul"},"Creating job to do narrow phase collision detection between each individual bullet ray and the ",(0,l.kt)("inlineCode",{parentName:"li"},"CompoundCollider"),". This is a parallel for each job over all broadphase collision pairs.")),(0,l.kt)("h2",{id:"monday-25th"},"Monday 25th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Testing out new collider pipeline (Jobs & Unity physics for narrow phase)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Some collisions are being missed"),(0,l.kt)("li",{parentName:"ul"},"It seems as if the entire chain link is not detecting a collision in the broadphase"),(0,l.kt)("li",{parentName:"ul"},"Growing boxes by bullet divergence"),(0,l.kt)("li",{parentName:"ul"},"Cleaning up some chain link behaviours during culling"),(0,l.kt)("li",{parentName:"ul"},"Added a fixed margin (5m) to all boxes, to ensure they're never too small (e.g. if both points are perfectly aligned on an axis)"),(0,l.kt)("li",{parentName:"ul"},"Inflated broadphase colliders (5m)"),(0,l.kt)("li",{parentName:"ul"},"Creating visualisers for bullet line boxes and collider bodies"),(0,l.kt)("li",{parentName:"ul"},"Noticed indexing error in the fill query, not accounting for chunk offset!"),(0,l.kt)("li",{parentName:"ul"},"Fixed!!!"))),(0,l.kt)("li",{parentName:"ul"},"Better ECS debugging",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Displaying names and IDs in inspector"),(0,l.kt)("li",{parentName:"ul"},"Caps invariant filtering")))),(0,l.kt)("h2",{id:"tuesday-26th"},"Tuesday 26th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Attaching VFX to hit GameObject"),(0,l.kt)("li",{parentName:"ul"},"Fixing VFX to only do a single burst"),(0,l.kt)("li",{parentName:"ul"},"Debugging why hit points are not on the surface of the object",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Creating bullet visualiser gizmo"),(0,l.kt)("li",{parentName:"ul"},"Scaling issue"))),(0,l.kt)("li",{parentName:"ul"},"Adding some more fields to the hit struct",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Normal"),(0,l.kt)("li",{parentName:"ul"},"Hit Dir"))),(0,l.kt)("li",{parentName:"ul"},"Building a pool to store VFX instances",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Installed ",(0,l.kt)("inlineCode",{parentName:"li"},"https://github.com/ayellowpaper/SerializedDictionary"),". Didn't work.")))),(0,l.kt)("h2",{id:"wednesday-27th"},"Wednesday 27th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Building pooling system for VFX gameobjects")),(0,l.kt)("h2",{id:"thursday-28th"},"Thursday 28th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Finishing VFX pooling system"),(0,l.kt)("li",{parentName:"ul"},"Using VFX pooling in bullet system (still a temporary setup until proper damage model is in place)"),(0,l.kt)("li",{parentName:"ul"},"Setting up framework for damage model",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DamageModel")," component attached to entities, which contains an ",(0,l.kt)("inlineCode",{parentName:"li"},"IDamageModel")," interface")))),(0,l.kt)("h2",{id:"friday-29th"},"Friday 29th"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Considering more damage model things (see ",(0,l.kt)("a",{parentName:"li",href:"/EphemerisNotes/Design/Damage/Ideas"},"Ideas"),")",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},'Proximity Trigger (e.g. RPF flak) - bullet collision needs to be "fat", VFX and damage needs to be spawned back from the actual collision point'),(0,l.kt)("li",{parentName:"ul"},"Contact Explosive - spawn an explosion at the point of contact, but only if the shell does not shatter (or otherwise destroyed)"),(0,l.kt)("li",{parentName:"ul"},"Armour penetrating - damage model needs to re-run collision tracing all colliders along path, until either energy is low (shell stops) or timed fuse (explode and do internal damage)")))))}p.isMDXComponent=!0}}]);
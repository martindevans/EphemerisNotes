"use strict";(self.webpackChunkephemeris_notes=self.webpackChunkephemeris_notes||[]).push([[8698],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var i=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},l=Object.keys(e);for(i=0;i<l.length;i++)a=l[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)a=l[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=i.createContext({}),d=function(e){var t=i.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},m=function(e){var t=d(e.components);return i.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=d(a),k=n,h=p["".concat(o,".").concat(k)]||p[k]||u[k]||l;return a?i.createElement(h,r(r({ref:t},m),{},{components:a})):i.createElement(h,r({ref:t},m))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,r=new Array(l);r[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,r[1]=s;for(var d=2;d<l;d++)r[d]=a[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,a)}p.displayName="MDXCreateElement"},4985:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var i=a(7462),n=(a(7294),a(3905));const l={tags:["devlog"],sidebar_position:4},r=void 0,s={unversionedId:"ImplementationDetails/devlog/2025/April",id:"ImplementationDetails/devlog/2025/April",title:"April",description:"Tuesday 1st",source:"@site/docs/ImplementationDetails/devlog/2025/April.md",sourceDirName:"ImplementationDetails/devlog/2025",slug:"/ImplementationDetails/devlog/2025/April",permalink:"/EphemerisNotes/ImplementationDetails/devlog/2025/April",draft:!1,editUrl:"https://github.com/martindevans/EphemerisNotes/tree/master/docs/ImplementationDetails/devlog/2025/April.md",tags:[{label:"devlog",permalink:"/EphemerisNotes/tags/devlog"}],version:"current",sidebarPosition:4,frontMatter:{tags:["devlog"],sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"March",permalink:"/EphemerisNotes/ImplementationDetails/devlog/2025/March"},next:{title:"Media",permalink:"/EphemerisNotes/category/media"}},o={},d=[{value:"Tuesday 1st",id:"tuesday-1st",level:2},{value:"Wednesday 2nd",id:"wednesday-2nd",level:2},{value:"Thursday 3rd",id:"thursday-3rd",level:2},{value:"Friday 4th",id:"friday-4th",level:2},{value:"Saturday/Sunday 5th/6th",id:"saturdaysunday-5th6th",level:2},{value:"Monday 7th",id:"monday-7th",level:2},{value:"Tuesday 8th",id:"tuesday-8th",level:2},{value:"Wednesday 9th",id:"wednesday-9th",level:2},{value:"Thursday 10th",id:"thursday-10th",level:2},{value:"Friday 11th",id:"friday-11th",level:2},{value:"Monday 14th",id:"monday-14th",level:2},{value:"Tuesday 15th",id:"tuesday-15th",level:2},{value:"Wednesday 16th",id:"wednesday-16th",level:2},{value:"Thursday 17th",id:"thursday-17th",level:2},{value:"Friday 18th",id:"friday-18th",level:2},{value:"Monday 21st",id:"monday-21st",level:2},{value:"Tuesday 22nd",id:"tuesday-22nd",level:2},{value:"Wednesday 23rd",id:"wednesday-23rd",level:2},{value:"Thursday 24th",id:"thursday-24th",level:2},{value:"Friday 25th",id:"friday-25th",level:2},{value:"Sunday 27th",id:"sunday-27th",level:2},{value:"Monday 28th",id:"monday-28th",level:2},{value:"Tuesday 29th",id:"tuesday-29th",level:2},{value:"Wednesday 30th",id:"wednesday-30th",level:2}],m={toc:d};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,i.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"tuesday-1st"},"Tuesday 1st"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Fixed names not syncing in lobby on first join"),(0,n.kt)("li",{parentName:"ul"},"Adding visuals to networked entity"),(0,n.kt)("li",{parentName:"ul"},"Moving some scripts from ",(0,n.kt)("inlineCode",{parentName:"li"},"SolarSystem")," test scene into main project"),(0,n.kt)("li",{parentName:"ul"},"Modified network spawn script to pick a random body in the system and generate a random orbit around it"),(0,n.kt)("li",{parentName:"ul"},"Moved some of the networking sync load into a job"),(0,n.kt)("li",{parentName:"ul"},"Improved ",(0,n.kt)("inlineCode",{parentName:"li"},"HotStuff")," units codegen",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Unified codegen for To/From conversions (e.g. ",(0,n.kt)("inlineCode",{parentName:"li"},"Metre.ToLightyear"),"), define once for both directions"),(0,n.kt)("li",{parentName:"ul"},"Added codegen for auto metric conversions (e.g. ",(0,n.kt)("inlineCode",{parentName:"li"},"Metre.ToKiloMetre"),")")))),(0,n.kt)("h2",{id:"wednesday-2nd"},"Wednesday 2nd"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Improved test coverage on ",(0,n.kt)("inlineCode",{parentName:"li"},"HotStuff")," (100% coverage on everything except generated code)"),(0,n.kt)("li",{parentName:"ul"},"Refactoring multiplayer systems into one single system group"),(0,n.kt)("li",{parentName:"ul"},"Investigating ",(0,n.kt)("inlineCode",{parentName:"li"},"LockBufferForWrite: Multiple uploads in flight for buffer")," error",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Maybe this can be solved with ",(0,n.kt)("inlineCode",{parentName:"li"},"AsyncGPUReadback")," to test if requests are in flight"))),(0,n.kt)("li",{parentName:"ul"},"Creating a system of heartbeat messages sending server time to clients every frame",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Detecting when sim is ahead/behind. This is very sensitive at high time speeds (errors amplified by 86400x)"),(0,n.kt)("li",{parentName:"ul"},"Using network time to get a better time measurement is a lost cause, jitter variance is amplified on top!"),(0,n.kt)("li",{parentName:"ul"},"Created a simple PID script, considering using this for time control")))),(0,n.kt)("h2",{id:"thursday-3rd"},"Thursday 3rd"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Creating systems to sync time as it drifts out of sync",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"When behind, increase time speed such that we would be perfectly back in sync in some period (e.g. 0.5s)"),(0,n.kt)("li",{parentName:"ul"},"When ahead, decrease time (aggressively)"))),(0,n.kt)("li",{parentName:"ul"},"Adding a delegate based overload to map/reduce queries in ",(0,n.kt)("inlineCode",{parentName:"li"},"Myriad.ECS")),(0,n.kt)("li",{parentName:"ul"},"Moved ",(0,n.kt)("inlineCode",{parentName:"li"},"TimeSpeedControlSystem")," to be server only"),(0,n.kt)("li",{parentName:"ul"},'Started designing new sync system based on a "soft lockstep"',(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"When a speed change is requested, server ",(0,n.kt)("em",{parentName:"li"},"schedules")," the change a small amount of time in the future (currently 0.25s)"),(0,n.kt)("li",{parentName:"ul"},"Clients apply these changes. When they're approaching a change (within one frame) they adjust time speed to land ",(0,n.kt)("strong",{parentName:"li"},"exactly")," at the right time for the change")))),(0,n.kt)("h2",{id:"friday-4th"},"Friday 4th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Refactored shader properties into one common class"),(0,n.kt)("li",{parentName:"ul"},"Modified ",(0,n.kt)("inlineCode",{parentName:"li"},"BaseDrawInstancedSymbols")," to take a direct reference to world host, instead of finding it"),(0,n.kt)("li",{parentName:"ul"},"Refactored world/sim host setup in ",(0,n.kt)("inlineCode",{parentName:"li"},"Myriad Unity Integration"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"BaseWorldHost")," (contains a world) -> ",(0,n.kt)("inlineCode",{parentName:"li"},"BaseSimulationHost")," (adds a system list) -> ",(0,n.kt)("inlineCode",{parentName:"li"},"GameTimeWorldHost")," (automatically updates those systems)"),(0,n.kt)("li",{parentName:"ul"},"This can be used in main project to add something akin to ",(0,n.kt)("inlineCode",{parentName:"li"},"GameTimeWorldHost")," which schedules time changes from the network"),(0,n.kt)("li",{parentName:"ul"},"Fixed lots of breakage in main project from this change"))),(0,n.kt)("li",{parentName:"ul"},"Writing some more serialization routines",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Rice coding"),(0,n.kt)("li",{parentName:"ul"},"Small ints (i.e. with a fixed number of bits)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Elias_gamma_coding"},"Elias Gamma coding")),(0,n.kt)("li",{parentName:"ul"},"Elias Delta Gamma coding"))),(0,n.kt)("li",{parentName:"ul"},"Created new world host ",(0,n.kt)("inlineCode",{parentName:"li"},"NetworkScheduledGameTimeSimulationHost"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Swapped network scene to use new world host")))),(0,n.kt)("h2",{id:"saturdaysunday-5th6th"},"Saturday/Sunday 5th/6th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Experimenting with more compression of orbit data",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Encoding exponents/signs separately as a stream of deltas, with gamma encoding. Exponent rarely changes, so most of the deltas are 1 single bit."),(0,n.kt)("li",{parentName:"ul"},"Encoding mantissas as a stream of deltas, with (bytewise) variable length encoding.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Higher order encoding (delta of delta etc) can compress more. But going too far explodes in size."),(0,n.kt)("li",{parentName:"ul"},"After 4th order differences, most values (in a test set of orbit data) are in the 0-10,000 range (i.e. 1-2 bytes). Hard to beat this with bitwise encoding, overhead for storing the length kills any gains.")))))),(0,n.kt)("h2",{id:"monday-7th"},"Monday 7th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Updated packages"),(0,n.kt)("li",{parentName:"ul"},"Testing ",(0,n.kt)("inlineCode",{parentName:"li"},"NetworkScheduledGameTimeSimulationHost"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Fixed issue with converging on exactly the right time"),(0,n.kt)("li",{parentName:"ul"},"Fixed time trying to run backwards for one frame"),(0,n.kt)("li",{parentName:"ul"},"Tested with terrible simulated latency (500ms base + 500ms jitter). Time change is perfect!"))),(0,n.kt)("li",{parentName:"ul"},"Experimented with some in-world HUD ideas (aka DRADIS)")),(0,n.kt)("h2",{id:"tuesday-8th"},"Tuesday 8th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Writing a script to create DRADIS view"),(0,n.kt)("li",{parentName:"ul"},"Investigating why ",(0,n.kt)("inlineCode",{parentName:"li"},"Shapes")," asset does not render with instancing enabled",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://shapes.userecho.com/communities/1/topics/367-instancing-breaking-because-of-disablebatching-tag"},"https://shapes.userecho.com/communities/1/topics/367-instancing-breaking-because-of-disablebatching-tag")),(0,n.kt)("li",{parentName:"ul"},"deleting the ",(0,n.kt)("inlineCode",{parentName:"li"},'"Library/ShaderCache"')," folder fixes the issue"))),(0,n.kt)("li",{parentName:"ul"},"Adding billboarded text to show distance"),(0,n.kt)("li",{parentName:"ul"},"Deciding on symbols for above/below plane",(0,n.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,n.kt)("li",{parentName:"ul",className:"task-list-item"},(0,n.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Need to implement these in script"))),(0,n.kt)("li",{parentName:"ul"},"Droplines"),(0,n.kt)("li",{parentName:"ul"},"Droparcs")),(0,n.kt)("h2",{id:"wednesday-9th"},"Wednesday 9th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Velocity paths",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Projecting down to plane with arc"),(0,n.kt)("li",{parentName:"ul"},"Resampling path for acceptable curvature"),(0,n.kt)("li",{parentName:"ul"},"Gathering metadata for extra iconography (crossing point, impact point)"),(0,n.kt)("li",{parentName:"ul"},"Ensuring line does not go beyond distance bounds"))),(0,n.kt)("li",{parentName:"ul"},"Not drawing shapes to cameras with mismatched layer mask"),(0,n.kt)("li",{parentName:"ul"},"Researching better polyline drawing (caching, trimming off start points)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"In theory could do it with a shader, but modifying ",(0,n.kt)("inlineCode",{parentName:"li"},"Shapes")," shaders is basically unsupported?"),(0,n.kt)("li",{parentName:"ul"},"Can't remove points (invalidates the entire mesh)"))),(0,n.kt)("li",{parentName:"ul"},"Building a pooling system for TextMeshes",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Reverted to using the shapes text caching"),(0,n.kt)("li",{parentName:"ul"},"Need something better in the future, this doesn't work for rapidly changing text (e.g. distances)"))),(0,n.kt)("li",{parentName:"ul"},"Created treeview prefab",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Added it to the multiplayer game scene"),(0,n.kt)("li",{parentName:"ul"},"Also added crosshair canvas"))),(0,n.kt)("li",{parentName:"ul"},"Created editor inspector for ",(0,n.kt)("inlineCode",{parentName:"li"},"NetworkScheduledGameTimeSimulationHost"))),(0,n.kt)("h2",{id:"thursday-10th"},"Thursday 10th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Setting up display for network stats"),(0,n.kt)("li",{parentName:"ul"},"Creating build",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Debugging null reference in build only"),(0,n.kt)("li",{parentName:"ul"},"Lockup in build! Seems to be an issue with UniTask not working",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"No, UniTask was working fine, I forgot to ",(0,n.kt)("inlineCode",{parentName:"li"},"await")))))),(0,n.kt)("li",{parentName:"ul"},"Tested over LAN",(0,n.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,n.kt)("li",{parentName:"ul"},"Traffic seems fine"),(0,n.kt)("li",{parentName:"ul"},"GPU load (2080S) is high (70%) but that's with the entire system loaded, not terrible"),(0,n.kt)("li",{parentName:"ul"},"CPU load seems fine (about 50% all cores)"),(0,n.kt)("li",{parentName:"ul",className:"task-list-item"},(0,n.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","treeview not showing bodies spawned remotely",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Doesn't matter which side spawned, other side doesn't seem them"),(0,n.kt)("li",{parentName:"ul"},"It's querying for ",(0,n.kt)("inlineCode",{parentName:"li"},"NBody")," which remote entities don't have"))),(0,n.kt)("li",{parentName:"ul",className:"task-list-item"},(0,n.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","TreeView in build is misaligned")))),(0,n.kt)("h2",{id:"friday-11th"},"Friday 11th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Investigating ",(0,n.kt)("inlineCode",{parentName:"li"},"LockBufferForWrite")," issue in ",(0,n.kt)("inlineCode",{parentName:"li"},"BaseDrawInstancedSymbols"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Creating a reproduction scene"),(0,n.kt)("li",{parentName:"ul"},"Scheduling a ",(0,n.kt)("inlineCode",{parentName:"li"},"AsyncGPUReadback")," request just after the write seems to work as a way to monitor the upload"),(0,n.kt)("li",{parentName:"ul"},"Added readbacks to ",(0,n.kt)("inlineCode",{parentName:"li"},"BaseDrawInstancedSymbols")))),(0,n.kt)("li",{parentName:"ul"},"Added rendering setting to disable particle stars in skybox"),(0,n.kt)("li",{parentName:"ul"},"Put together system for estimating clock skew"),(0,n.kt)("li",{parentName:"ul"},'Creating "auto scheduler" which reschedules the current time speed every so often',(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Changing time speed already has a very good sync system, so we can just do this to ensure minor clock skew is corrected."))),(0,n.kt)("li",{parentName:"ul"},"Removed skew detection altogether")),(0,n.kt)("h2",{id:"monday-14th"},"Monday 14th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Writing docs for Myriad collect and cursor queries",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Also adding some tests"))),(0,n.kt)("li",{parentName:"ul"},"Fixed lobby not decrementing ready count when a player leaves"),(0,n.kt)("li",{parentName:"ul"},"Switched some lobby buttons to FUI"),(0,n.kt)("li",{parentName:"ul"},"Testing deleting entities over network"),(0,n.kt)("li",{parentName:"ul"},"Fixed one symbol being rendered even when instance count is zero"),(0,n.kt)("li",{parentName:"ul"},"Adding ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/martindevans/HandySerialization/tree/master"},"HandySerialization")," wrapper around Mirror writer",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Writing a new encoding system in ",(0,n.kt)("inlineCode",{parentName:"li"},"HandySerialization")," using delta encoding and a higher order predictor (",(0,n.kt)("a",{parentName:"li",href:"https://github.com/martindevans/HandySerialization/blob/master/HandySerialization/Extensions/DeltaSequences.cs"},"here"),")."))),(0,n.kt)("li",{parentName:"ul"},"Rewritten orbit data encoding in game to use delta compressed sequences. Should be about 34% of the size.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Debugging deserialization errors"),(0,n.kt)("li",{parentName:"ul"},"It works!",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"But only achieves about 50%, which is a bit worse than the 34% achieved on a selection of real data during development."),(0,n.kt)("li",{parentName:"ul"},"Could consider adding deflate, should get down to about 15% (according to that same test data)"))),(0,n.kt)("li",{parentName:"ul"},"Dropping frames when spamming the spawn button",(0,n.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,n.kt)("li",{parentName:"ul",className:"task-list-item"},(0,n.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Move serialisation work off main thread"),(0,n.kt)("li",{parentName:"ul",className:"task-list-item"},(0,n.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Throttle the amount of orbit data pages sent per frame")))))),(0,n.kt)("h2",{id:"tuesday-15th"},"Tuesday 15th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Cleaned up serialization for orbit data"),(0,n.kt)("li",{parentName:"ul"},'Creating new writer structs for Unity "native" memory'),(0,n.kt)("li",{parentName:"ul"},"Converting sending of rail data to encode into bytes in a job, then send the raw bytes once that's done",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Lots of extensions to serialization to support this",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Sending/receiving native memory"),(0,n.kt)("li",{parentName:"ul"},"Working with spans in serialization"),(0,n.kt)("li",{parentName:"ul"},"Converting between spans and native memory"),(0,n.kt)("li",{parentName:"ul"},"General pattern for sending an ",(0,n.kt)("inlineCode",{parentName:"li"},"OwnedList")," struct, which is written to the network writer and immediately disposed"))),(0,n.kt)("li",{parentName:"ul"},"Debugging issue with decoding crashing",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Adding extra sync bytes"),(0,n.kt)("li",{parentName:"ul"},"Refactoring how bit writing is handled in ",(0,n.kt)("inlineCode",{parentName:"li"},"HandySerialization")))))),(0,n.kt)("li",{parentName:"ul"},"Refactoring ",(0,n.kt)("inlineCode",{parentName:"li"},"RailPage")," to have separate accessors for read/write access"),(0,n.kt)("li",{parentName:"ul"},"Quick experiment with bending text mesh",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Looks ok, but distorts text at high bends")))),(0,n.kt)("h2",{id:"wednesday-16th"},"Wednesday 16th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Fixed droparcs on dradis view sometimes curving the wrong way"),(0,n.kt)("li",{parentName:"ul"},"Testing large number of multiplayer synced entities (profiling jobbified encoding from yesterday)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Investigating message sent to dead entity",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Entities are destroyed by impact on server, but not on client"))),(0,n.kt)("li",{parentName:"ul"},"Setting up system for lifetime management",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Entity is kept alive as a phantom even when destroyed"),(0,n.kt)("li",{parentName:"ul"},"When the owner GO detects the entity is dead, it sends a message to the server requesting destruction (of the GO)"),(0,n.kt)("li",{parentName:"ul"},"When the GO is destroyed, the phantom keeping it alive is removed"))))),(0,n.kt)("li",{parentName:"ul"},"Moved some multiplayer related stuff into the main project")),(0,n.kt)("h2",{id:"thursday-17th"},"Thursday 17th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Fixed orbital lines not being relative to the right body when first created"),(0,n.kt)("li",{parentName:"ul"},"Fixed some references to dead entities in relative orbits (just during initial setup)"),(0,n.kt)("li",{parentName:"ul"},"Moved some work in ",(0,n.kt)("inlineCode",{parentName:"li"},"rail")," -> ",(0,n.kt)("inlineCode",{parentName:"li"},"relative rail")," conversion into jobs (copying all of the position data)"),(0,n.kt)("li",{parentName:"ul"},"Improving loading screen infrastructure",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Investigating ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/LeiQiaoZhi/Easy-Text-Effects-for-Unity/tree/main"},"https://github.com/LeiQiaoZhi/Easy-Text-Effects-for-Unity/tree/main")),(0,n.kt)("li",{parentName:"ul"},"Showing scenario title"))),(0,n.kt)("li",{parentName:"ul"},"Investigating Mirror hybrid transform"),(0,n.kt)("li",{parentName:"ul"},"Setup integrator for linear/angular physics (small scale)"),(0,n.kt)("li",{parentName:"ul"},"Rotation works in MP",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Using ",(0,n.kt)("inlineCode",{parentName:"li"},"NetworkTransformHybrid"),", seems quite new in Mirror so we'll see how stable it is"))),(0,n.kt)("li",{parentName:"ul"},"Fixed an issue where entities that are destroyed by impact too quickly (e.g. created inside a planet) never properly initialise"),(0,n.kt)("li",{parentName:"ul"},"Fixed issue in ",(0,n.kt)("inlineCode",{parentName:"li"},"CopyOrientationToUnityTransform")," system accessing destroyed transform")),(0,n.kt)("h2",{id:"friday-18th"},"Friday 18th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Working on a new binding system for GameObject <-> Entity, should be more robust to very short lived entities (destroying the entity before the binding is even created)")),(0,n.kt)("h2",{id:"monday-21st"},"Monday 21st"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Finishing rewrite of binding system"),(0,n.kt)("li",{parentName:"ul"},"Pulled into main project, fixed breaking changes, tested in docking sim scene")),(0,n.kt)("h2",{id:"tuesday-22nd"},"Tuesday 22nd"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Researching post on ",(0,n.kt)("a",{parentName:"li",href:"https://www.reddit.com/r/spaceships/comments/1k51vjd/what_would_spaceship_battles_actually_be_like/"},"https://www.reddit.com/r/spaceships/comments/1k51vjd/what_would_spaceship_battles_actually_be_like/")),(0,n.kt)("li",{parentName:"ul"},"Unit tests for new binding systems"),(0,n.kt)("li",{parentName:"ul"},"Prototyping idea for a better binding system (new one works, but it's complex)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Get a notification from Myriad when an entity becomes a phantom"),(0,n.kt)("li",{parentName:"ul"},"Developing ",(0,n.kt)("inlineCode",{parentName:"li"},"IPhantomNotifierComponent"))))),(0,n.kt)("h2",{id:"wednesday-23rd"},"Wednesday 23rd"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Finalising notifier components"),(0,n.kt)("li",{parentName:"ul"},"Updating Myriad/Unity binding package",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Not using new notifiers in binding system yet, what I've got works"))),(0,n.kt)("li",{parentName:"ul"},"Investigating multiplayer spawning issues discovered on Friday",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Reproduced by just spamming create",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Doing this in single player is fine"))),(0,n.kt)("li",{parentName:"ul"},"The bound entity on the receiving end has become a phantom"),(0,n.kt)("li",{parentName:"ul"},"Looks like the rail is desynced, it has already ended in an impact"),(0,n.kt)("li",{parentName:"ul"},"A remote page is being created with negative time, and an incorrect sample count",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Negative time probably just comes from reading empty data"),(0,n.kt)("li",{parentName:"ul"},"Wrong sample count came from sending the entire data array, not just the valid slice!"),(0,n.kt)("li",{parentName:"ul"},"Fixing this has fixed the issue"))))),(0,n.kt)("li",{parentName:"ul"},"Rewritten rail sender system to have a bytes/second send limit. Working through rails in order (shortest first) sending data each frame until the budget is exceeded.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Fixed budget scaling with sim speed (using ",(0,n.kt)("inlineCode",{parentName:"li"},"Time.unscaledDeltaTime"),")"))),(0,n.kt)("li",{parentName:"ul"},"Fixed issue with accessing disposed collection"),(0,n.kt)("li",{parentName:"ul"},"Experimenting with Steam achievements")),(0,n.kt)("h2",{id:"thursday-24th"},"Thursday 24th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returning sub arrays of the correct size, making out of bounds access of orbit data impossible"),(0,n.kt)("li",{parentName:"ul"},"Tested at high time speed for 2 years",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Entity positions remained synced"),(0,n.kt)("li",{parentName:"ul"},"Time sync when pausing was slightly off (2 seconds)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Reduced re-schedule time to combat this"))))),(0,n.kt)("li",{parentName:"ul"},"Fixed mirror network stats GUI",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Not counting packets from latency sim"),(0,n.kt)("li",{parentName:"ul"},"Not rebinding when backend is changed"))),(0,n.kt)("li",{parentName:"ul"},"Written new orientation sync behaviour, replacing mirror sync which doesn't work well at high time speeds")),(0,n.kt)("h2",{id:"friday-25th"},"Friday 25th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"More testing of new rotation sync",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"For some reason the error estimate rapidly diverges, sending more updates than necessary"),(0,n.kt)("li",{parentName:"ul"},"Using better integrator which is more stable over long timesteps"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"NBodyOrbitLine")," improvements",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Fixed visible jagged line for one frame when the first page of data is converted",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"LOD selection was picking lowest detail (because there's nothing to show) so when the first page was added it took a frame to update"))),(0,n.kt)("li",{parentName:"ul"},"Moved some more LOD work into the job off the main thread"),(0,n.kt)("li",{parentName:"ul"},"Fixed single frame showing a line going to the origin when first created"),(0,n.kt)("li",{parentName:"ul"},"Implemented the GPU side of a new LOD system",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Allowing runs of vertices to render at the same LOD, with multiple runs. This means that just the relevant bit can be drawn at a higher LOD."))),(0,n.kt)("li",{parentName:"ul"},"Started implementing CPU side, selecting parameters for GPU to draw from")))),(0,n.kt)("h2",{id:"sunday-27th"},"Sunday 27th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Had an idea for the CPU side of the adaptive LOD",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"It didn't work"))),(0,n.kt)("li",{parentName:"ul"},"Fixed error in shader, misinterpreting indices"),(0,n.kt)("li",{parentName:"ul"},"It works!")),(0,n.kt)("h2",{id:"monday-28th"},"Monday 28th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Investigating burst compiling packet encoding"),(0,n.kt)("li",{parentName:"ul"},"Testing adaptive LOD more"),(0,n.kt)("li",{parentName:"ul"},"Plotting out work for next couple of months"),(0,n.kt)("li",{parentName:"ul"},"Working on tactical overlay",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Drawing a mark at impact point"),(0,n.kt)("li",{parentName:"ul"},"Gathering closest point"),(0,n.kt)("li",{parentName:"ul"},"Drawing a circle at closest point"),(0,n.kt)("li",{parentName:"ul"},"Adding toggles for various elements, basis for future user customisation"))),(0,n.kt)("li",{parentName:"ul"},"Tested networking on LAN",(0,n.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,n.kt)("li",{parentName:"ul",className:"task-list-item"},(0,n.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Steam connection is not working",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Seems like Mirror doesn't like switching backends in this way")))))),(0,n.kt)("h2",{id:"tuesday-29th"},"Tuesday 29th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Splitting out drawing of on-plane icons for contacts",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'Changing icons for "hot" and "cold" contacts'))),(0,n.kt)("li",{parentName:"ul"},"Different colours for contact boxes based on alignment (friendly, neutral, hostile)"),(0,n.kt)("li",{parentName:"ul"},"Added randomisation to integrator in test scene"),(0,n.kt)("li",{parentName:"ul"},"Creating a job to convert polyline points into a mesh",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Shapes package includes this, but it's not in a job and allocates a lot"),(0,n.kt)("li",{parentName:"ul"},'Also I can add a feature to store "time" per vertex, allowing for smooth cut-off at the start in the pixel shader as time progresses')))),(0,n.kt)("h2",{id:"wednesday-30th"},"Wednesday 30th"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Modifying polyline importer to emit more vertex data"),(0,n.kt)("li",{parentName:"ul"},"Created polyline shader which smoothly interpolates values and discards those pixels if they're out of range"),(0,n.kt)("li",{parentName:"ul"},"Tested with rainbow colours"),(0,n.kt)("li",{parentName:"ul"},"Better error handling in Shapes drawing"),(0,n.kt)("li",{parentName:"ul"},"Swapping all thickness values from ",(0,n.kt)("inlineCode",{parentName:"li"},"Pixels")," to ",(0,n.kt)("inlineCode",{parentName:"li"},"Noots")),(0,n.kt)("li",{parentName:"ul"},'Aligning "hot" icon with approach vector'),(0,n.kt)("li",{parentName:"ul"},"Experimenting with ways to indicate multiple contacts aggregated together into one")))}u.isMDXComponent=!0}}]);